@page "/"



@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@attribute [StreamRendering]
@inject ILeaderboardService getdata



<PageTitle>LeaderBoard</PageTitle>


<style>

    tbody tr {
        background-color: rgba(0,0,0,0.04);
    }

        tbody tr:nth-child(even) {
            background: rgba(255,255,255,0.4);
        }


    th.name {
        width: 12rem;
    }

    th.score {
        width: 12rem;
    }





</style>

<div class="hstack gap-3 d-flex justify-content-center pt-2">
    <h1 class="text-center">Scoreboard</h1>

     <div class="page-size-chooser">   
        <select @bind="@vrs">
           <option>1.0</option>
            <option>1.5</option>
        </select>
    </div>

</div>




@if (FilteredCountries is null)
{
   
}
else
{


<div class="vstack align-content-center flex-wrap py-4 py-xl-5">
     <div class="grid">
            <QuickGrid Items="@FilteredCountries" Pagination="@pagination" Theme="default">
            <PropertyColumn Property="@(c => c.Name)"  Class="name" >
                <ColumnOptions >
                <div class="search-box">
                    <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="name" />
                </div>
            </ColumnOptions>
            </PropertyColumn>     
                <PropertyColumn Property="@(c => c.Score)" Sortable="true" Class="score" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending" Align="Align.Right" />
            <PropertyColumn Property="@(c => c.Version)" Sortable="true" Align="Align.Right" />

 

        </QuickGrid>
    </div>
    <Paginator State="@pagination" /> 
</div>




}



@code {

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private string _vrs = "1.5";

    public string vrs 
    { 
        get => _vrs;

        set
        {
            _vrs = value;
            UpdateScoretoVers(value);

        } 
    }

    string nameFilter;

    private IQueryable<ClientLeaderboardModel> _FilteredCountries;

    IQueryable<ClientLeaderboardModel> FilteredCountries
    {
        get
        {

            var result = _FilteredCountries;

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
        set
        {
            _FilteredCountries = value;
        }
    }  


    protected override async Task OnInitializedAsync()
    {


        // Console.WriteLine("OnInitializedAsync");
        // Console.WriteLine(Score);
        FilteredCountries = (await getdata.GetScore("1.5")).AsQueryable();
        // Console.WriteLine(Score);

    }


    private async Task UpdateScoretoVers(string Vrs)
    {
        FilteredCountries = (await getdata.GetScore(Vrs)).AsQueryable();
        StateHasChanged();
    }


    










}
